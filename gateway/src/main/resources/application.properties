spring.application.name=${APPLICATION_NAME:gateway}

server.port=${SERVER_PORT:8081}

spring.cloud.gateway.routes[0].id=${ROUTE_SERVER_ADMIN_ID:server-administrator}
spring.cloud.gateway.routes[0].uri=${ROUTE_SERVER_ADMIN_URI:lb://server-administrator}
spring.cloud.gateway.routes[0].predicates[0]=${ROUTE_SERVER_ADMIN_PREDICATE:Path=/api/admin/**}

spring.cloud.gateway.routes[1].id=${ROUTE_WEB_PAGE_ID:web-page}
spring.cloud.gateway.routes[1].uri=${ROUTE_WEB_PAGE_URI:lb://web-page}
spring.cloud.gateway.routes[1].predicates[0]=${ROUTE_WEB_PAGE_PREDICATE:Path=/api/page/**}

management.endpoint.gateway.enabled=${MANAGEMENT_ENDPOINT_GATEWAY_ENABLED:true}

svc.redis.host=${REDIS_HOST:redis}
svc.redis.port=${REDIS_PORT:6379}
svc.redis.password=${REDIS_PASSWORD:monsterGym}

spring.security.oauth2.resourceserver.jwt.issuer-uri=${JWT_ISSUER_URI:http://keycloak:8181/realms/docker-real}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${JWT_JWK_SET_URI:http://keycloak:8181/realms/docker-real/protocol/openid-connect/certs}

svc.keycloak.client-id=${KEYCLOAK_CLIENT_ID:Docker-Gym}
svc.keycloak.docker-real=${REALM_APP:Docker-Gym}
svc.keycloak.client-secret=${CLIEN_SECRET:WULxx0DS75ym4XczTJSSNsFOXW1spXnT}
svc.keycloak.url=${SERVER_URL_KEY:http://keycloak:8181}

jwt.auth.converter.resource-id=${JWT_RESOURCE_ID:Docker-Gym}
jwt.auth.converter.principle-attribute=${JWT_PRINCIPLE_ATTRIBUTE:preferred_username}

#Description: This property enables the Kubernetes Secrets API within Spring Cloud. It allows your application to retrieve sensitive configuration data (like passwords, tokens) from Kubernetes Secrets.
spring.cloud.kubernetes.secrets.enable-api=true

#Description: Enables service discovery across all namespaces in Kubernetes. This means your application will be able to discover and communicate with services deployed in any namespace, not just the one it is deployed in.
spring.cloud.kubernetes.discovery.all-namespaces=true 
spring.profiles.active=dev
# Here I active all endpoint to let the kubernetes in to look over the current state of the application (Expecially in the endpoins liveness and readiness)
management.endpoint.health.show-details=always
management.endpoint.health.probes.enabled=true
#Purpose: Detects if the application needs to be restarted.
management.health.livenessstate.enabled=true
#Purpose: Determines if the application is ready to handle requests.
management.health.readinessstate.enabled=true
spring.cloud.kubernetes.config.enabled=true
management.endpoints.web.exposure.include=health,info,auditevents
